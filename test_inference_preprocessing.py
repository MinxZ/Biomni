"""
Test script for load_preprocessing_pipeline and apply_inference_preprocessing functions.

This script demonstrates how to:
1. Load a saved preprocessing pipeline
2. Apply inference preprocessing to new SMILES molecules
3. Test with a simple SMILES list: ['CC', 'CCC', 'CCCO']
"""

from biomni.tool.preprocessing import load_preprocessing_pipeline, apply_inference_preprocessing


def test_inference_preprocessing():
    """Test loading and applying preprocessing pipeline to new SMILES."""
    
    print("🧪 Testing Inference Preprocessing Pipeline")
    print("="*50)
    
    # Test SMILES list
    test_smiles = ['CC', 'CCC', 'CCCO']
    print(f"📝 Test SMILES: {test_smiles}")
    
    # Pipeline file path (should be generated by direct_workflow_example_new.py)
    pipeline_path = "preprocessing_pipeline.json"
    
    try:
        # Step 1: Load preprocessing pipeline
        print(f"\n{'='*50}")
        print("📂 STEP 1: Loading Preprocessing Pipeline")
        print(f"{'='*50}")
        
        pipeline_metadata = load_preprocessing_pipeline(pipeline_path)
        
        # Display pipeline info
        pipeline_info = pipeline_metadata.get('pipeline_info', {})
        print(f"\n📊 Pipeline Information:")
        print(f"   Version: {pipeline_info.get('pipeline_version', 'N/A')}")
        print(f"   Created: {pipeline_info.get('created_at', 'N/A')}")
        print(f"   Target column: {pipeline_info.get('target_column', 'N/A')}")
        print(f"   Selected features: {len(pipeline_info.get('selected_features', []))}")
        
        # Step 2: Apply inference preprocessing
        print(f"\n{'='*50}")
        print("🔧 STEP 2: Applying Inference Preprocessing")
        print(f"{'='*50}")
        
        inference_result = apply_inference_preprocessing(
            smiles_list=test_smiles,
            pipeline_metadata=pipeline_metadata,
            verbose=True
        )
        
        # Display results
        if inference_result and 'final_data' in inference_result:
            print(f"\n📊 Inference Results:")
            final_data = inference_result['final_data']
            print(f"   Processed molecules: {len(final_data)}")
            print(f"   Features per molecule: {final_data.shape[1] if hasattr(final_data, 'shape') else 'N/A'}")
            
            # Show first few rows if it's a DataFrame
            if hasattr(final_data, 'head'):
                print(f"\n📋 Sample processed data (first 3 rows, first 5 columns):")
                print(final_data.iloc[:3, :5])
                
                print(f"\n🧪 SMILES → Features mapping:")
                for i, smiles in enumerate(test_smiles):
                    if i < len(final_data):
                        print(f"   {smiles} → {final_data.shape[1]} features")
            
            # Show processing statistics if available
            if 'processing_stats' in inference_result:
                stats = inference_result['processing_stats']
                print(f"\n📈 Processing Statistics:")
                print(f"   Input SMILES: {stats.get('input_molecules', len(test_smiles))}")
                print(f"   Valid molecules: {stats.get('valid_molecules', 'N/A')}")
                print(f"   Success rate: {stats.get('success_rate', 'N/A')}")
        
        print(f"\n{'='*50}")
        print("✅ INFERENCE PREPROCESSING TEST COMPLETED")
        print(f"{'='*50}")
        print("🎯 Ready for model inference!")
        
        return inference_result
        
    except FileNotFoundError:
        print(f"❌ Error: Pipeline file '{pipeline_path}' not found.")
        print("💡 Make sure to run 'direct_workflow_example_new.py' first to generate the pipeline.")
        return None
        
    except Exception as e:
        print(f"❌ Error during inference preprocessing: {str(e)}")
        import traceback
        traceback.print_exc()
        return None


if __name__ == "__main__":
    print("🧬 Inference Preprocessing Test")
    print("Testing load_preprocessing_pipeline and apply_inference_preprocessing")
    print("="*80)
    
    result = test_inference_preprocessing()
    
    if result:
        print(f"\n{'='*80}")
        print("✅ TEST PASSED!")
        print("📊 The preprocessing pipeline successfully processed the test SMILES.")
        print("🚀 You can now use this preprocessed data for model inference.")
    else:
        print(f"\n{'='*80}")
        print("❌ TEST FAILED!")
        print("Please check the error messages above.")
    
    print(f"{'='*80}")